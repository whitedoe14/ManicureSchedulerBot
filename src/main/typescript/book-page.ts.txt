const tgWebApp: any = Telegram.WebApp;
tgWebApp.expand();

// Set theme
document.documentElement.style.setProperty("--tg-theme-bg-color", tgWebApp.backgroundColor);
document.documentElement.style.setProperty("--tg-theme-text-color", tgWebApp.textColor);
document.documentElement.style.setProperty("--tg-theme-hint-color", tgWebApp.hintColor);
document.documentElement.style.setProperty("--tg-theme-link-color", tgWebApp.linkColor);
document.documentElement.style.setProperty("--tg-theme-button-color", tgWebApp.buttonColor);
document.documentElement.style.setProperty("--tg-theme-button-text-color", tgWebApp.buttonTextColor);

// Calendar logic
let currentDate: Date = new Date();
let selectedDate: Date | null = null;
let selectedTimeSlot: HTMLElement | null = null;

const monthNames: string[] = ["January", "February", "March", "April", "May", "June",
    "July", "August", "September", "October", "November", "December"];

const daysGrid: HTMLElement | null = document.getElementById("daysGrid");
const currentMonthElement: HTMLElement | null = document.getElementById("currentMonth");
const prevMonthBtn: HTMLElement | null = document.getElementById("prevMonth");
const nextMonthBtn: HTMLElement | null = document.getElementById("nextMonth");
const timeSlotsContainer: HTMLElement | null = document.getElementById("timeSlots");
const submitBtn: HTMLElement | null = document.getElementById("submitBtn");

function updateCalendar(): void {
    const year: number = currentDate.getFullYear();
    const month: number = currentDate.getMonth();

    if (currentMonthElement) {
        currentMonthElement.textContent = `${monthNames[month]} ${year}`;
    }

    const firstDay: Date = new Date(year, month, 1);
    const lastDay: Date = new Date(year, month + 1, 0);

    if (daysGrid) {
        daysGrid.innerHTML = "";

        // Add empty cells for days before the first day of the month
        for (let i: number = 0; i < (firstDay.getDay() || 7) - 1; i++) {
            daysGrid.appendChild(document.createElement("div"));
        }

        // Add days of the month
        for (let day: number = 1; day <= lastDay.getDate(); day++) {
            const dayElement: HTMLElement = document.createElement("div");
            dayElement.textContent = day.toString();

            const dayDate: Date = new Date(year, month, day);
            if (dayDate < new Date().setHours(0, 0, 0, 0)) {
                dayElement.classList.add("disabled");
            } else {
                dayElement.addEventListener("click", () => selectDate(dayDate));
            }

            if (selectedDate && dayDate.toDateString() === selectedDate.toDateString()) {
                dayElement.classList.add("selected");
            }

            daysGrid.appendChild(dayElement);
        }

        // Disable next button if we're 3 months ahead
        const threeMonthsLater: Date = new Date();
        threeMonthsLater.setMonth(threeMonthsLater.getMonth() + 3);
        if (nextMonthBtn) {
            nextMonthBtn.disabled = currentDate >= threeMonthsLater;
        }
    }
}

function selectDate(date: Date): void {
    selectedDate = date;
    updateCalendar();
    fetchTimeSlots(date);
}

async function fetchTimeSlots(date: Date): Promise<void> {
    const response: { ok: boolean; json: () => Promise<string[]> } = await new Promise(resolve => setTimeout(() => resolve({
        ok: true,
        json: () => Promise.resolve(["10:00", "11:00", "14:00", "15:00", "16:00"])
    }), 500));

    if (response.ok) {
        const slots: string[] = await response.json();
        displayTimeSlots(slots);
    } else {
        console.error("Failed to fetch time slots");
        if (timeSlotsContainer) {
            timeSlotsContainer.innerHTML = "<p>Failed to load time slots. Please try again.</p>";
        }
    }
}

function displayTimeSlots(slots: string[]): void {
    if (timeSlotsContainer) {
        timeSlotsContainer.innerHTML = "";
        slots.forEach(slot => {
            const slotElement: HTMLElement = document.createElement("div");
            slotElement.textContent = slot;
            slotElement.classList.add("time-slot");
            slotElement.addEventListener("click", () => selectTimeSlot(slot, slotElement));
            timeSlotsContainer.appendChild(slotElement);
        });
    }
}

function selectTimeSlot(slot: string, element: HTMLElement): void {
    if (selectedTimeSlot) {
        selectedTimeSlot.classList.remove("selected");
    }
    selectedTimeSlot = element;
    selectedTimeSlot.classList.add("selected");
}

if (prevMonthBtn) {
    prevMonthBtn.addEventListener("click", function () {
        alert("BOBO");
    });
}

if (nextMonthBtn) {
    nextMonthBtn.addEventListener("click", () => {
        currentDate.setMonth(currentDate.getMonth() + 1);
        updateCalendar();
    });
}

if (submitBtn) {
    submitBtn.addEventListener("click", () => {
        if (selectedDate && selectedTimeSlot) {
            const result: { date: string; time: string } = {
                date: selectedDate.toISOString().split("T")[0],
                time: selectedTimeSlot.textContent || ""
            };
            tgWebApp.sendData(JSON.stringify(result));
            tgWebApp.close();
        } else {
            alert("Please select both date and time");
        }
    });
}

// Initial calendar update
updateCalendar();
